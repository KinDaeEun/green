객체지향(OOP)

객체지향의 정의: 프로그래밍에서 필요한 데이터를 추상화시켜 행위(Method)와 상태(Attribute)를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법.


객체의 정의: 객체란 식별 가능한 개체 또는 사물이다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 인스턴스들을 통칭하는 용도로 사용한다.

클래스의 정의: 클래스는 객체를 정의하는 틀 또는 설계도를 의미한다.


객체지향 4가지 특징
1.다형성: 다형성은 동일한 이름의 메서드가 다른 동작을 수행하도록 하는 능력이고 메서드 오버로딩과 메서드 오버라이딩을 통해 구현됩니다.
2.캡슐화: 캡슐화는 객체의 내부 상태와 동작을 외부로부터 숨기는 것을 의미합니다. 이것은 정보 은닉을 통해 객체의 데이터를 보호하고, 공개 인터페이스를 통해 객체와 상호 작용하도록 합니다.
3.추상화: 추상화는 객체의 공통적인 속성과 기능을 추출하여 정의하는것을 의미합니다. 추상 클래스와 인터페이스를 통해 구현됩니다.
4.상속: 상속은 부모 클래스로부터 속성과 메서드를 상속받아 새로운 클래스(자식 클래스)를 만드는 개념이고 이를 통해 코드 재사용성이 향상할 수 있습니다.



JAVA

javascript와 java의 차이:  java는 코드를 작성한 후 컴파일을 하면, 컴파일러에 의해 기계어로 변환된 파일이 생성되고 컴퓨터는 그 파일을 실행한다. js같은 스크립트 언어는 별도의 파일 생성 없이 소스 코드가 작성될 때마다 인터프리터가 해당 코드를 기계어로 번역하고 실행한다.


java메모리 영역:
Static 영역(method 영역): 클래스 변수나, static 으로 선언된 것들이 해당 메모리 영역에 저장된다. 
Heap 영역: 인스턴스를 생성할 때 사용되는 메모리 영역이다. 
Stack 영역: 기본 자료형(원시 자료형, Primitive type), 지역변수, 매개변수가 저장되는 메모리.


JVM의 정의: JVM은 자바 프로그램을 실행하기 위한 가상 머신.
1.바이트 코드 실행: JVM은 자바 컴파일러로부터 생성된 바이트 코드를 실행합니다. 
2.플랫폼 중립성: JVM은 플랫폼과 운영 체제에 독립적이며 자바 프로그램을 한 번 작성하면 여러 다양한 플랫폼에서 실행할 수 있게 해줍니다.
3.가비지 컬렉션: JVM은 가비지 컬렉션을 통해 더 이상 참조되지 않는 객체를 자동으로 정리합니다. 
4.실행 시간 환경 제공: JVM은 프로그램이 실행하는 동안 런타임 환경을 제공합니다. 이는 예외 처리, 멀티스레딩, 네트워킹, 입출력 등과 같은 다양한 런타임 작업을 지원합니다.
5.자바 API와 라이브러리 지원: JVM은 자바 표준 라이브러리 및 다양한 API를 제공하며, 자바 프로그래머가 다양한 작업을 수행할 수 있도록 돕습니다.


오버로딩: 매개변수의 개수나 타입을 다르게 하여 같은 이름의 메소드를 여러 개 정의하는 것을 말합니다.
오버라이딩: 상위 클래스에 있는 메소드를 하위 클래스에서 재정의 하는 것입니다.


추상클래스와 인터페이스

추상클래스: 추상클래스는 다른 클래스들에 의해 확장되고 구현되는 베이스 클래스입니다. 추상 클래스는 하나 이상의 추상메서드가 있어야 돼고, 상속 받은 자식 클래스는 부모의 추상클래스를 무조건 선언해야 되고 다중 상속은 불가.

추상메서드: 선언부는 있지만 구현부가 없는 메서드

인터페이스:인터페이스는 클래스와 클래스 사이, 또는 클래스와 사용자 간의 상호 작용을 정의하는 일종의 계약입니다. 인터페이스에 선언된 필드는 모두 public static final 형식이고 다중 상속 가능합니다.

공통점: new 연산자로 인스턴스 생성 불가능하고 사용하기 위해서는 하위 클래스에서 확장/구현 해야 한다.

차이점: 인터페이스를 상속받은 메소드가 그 인터페이스의 모든 메서드를 생성해야 됩니다. 추상클래스는 다중상속이 불가능하지만, 인터페이스는 다중상속이 가능하다.


Collection: 많은 데이터 요소를 효율적으로 관리하기 위한 자료구조(List, Set).

  List: List는 순서가 있고 인덱스로 접근가능한 데이터 구조이고, 길이를 변경할 수 있습니다.

    ArrayList:  리스트를 구현한 클래스고, 요소들은 인덱스로 직접 접근가능하지만 중간 삽입 또는 삭제가 느릴 수 있습니다.
    LinkedList: 각 요소는 이전 요소와 다음 요소에 대한 참조를 가지고 있어, 요소의 삽입 및 삭제가 빠르지만 탐색할 때 느릴 수 있습니다.
    Vector:  Java의 오래된 컬렉션 클래스 중 하나로, 동기화된 스레드에서 안전하게 사용할 수 있는 동기화된 배열 리스트입니다. 
    Stack: 후입선출(LIFO, Last-In-First-Out) 원칙에 따라 동작하는 데이터 구조를 구현한 클래스입니다.

  Set: Set은 순서 없어서 중복 불가하는 데이터 구조이고, 길이를 변경할 수 있고, 집합 연산을 지원합니다. 

    HashSet: 요소들은 순서 없이 저장되며, 중복 요소를 허용하지 않고 해시 함수를 사용하여 요소의 검색 및 삽입 속도가 빠릅니다.
    TreeSet: 요소들은 정렬된 순서로 저장되며, 중복 요소를 허용하지 않습니다. 요소를 검색하거나 범위 검색에 적합하지만 속도가 약간 느립니다.


Map: Map은 key과 value으로 구성하는 데이터 집합이고, value은 중복 가능 하지만, key는 중복 불가합니다.

     HashMap: 가장 일반적으로 사용하는 Map이다. 해시 함수를 사용하여 빠른 검색 및 삽입 속도를 제공합니다.
     TreeMap: 키를 기반으로 요소를 정렬하기 때문에 범위 검색과 정렬된 출력이 중요한 경우에 유용합니다.
     Hashtable: 스레드 동기화를 지원하여 멀티스레딩 환경에서 안전하게 사용할 수 있습니다. 


배열과 List의 차이
배열 : 데이터형 같음, 갯수가 고정, 속도가 빠름
List : generic을 사용하지 않으면 여러 데이터형 사용가능하고 갯수가 가변적, 융통성 있음


String 데이터형
new String(): new String() 방식은 참조형이고 힙 메모리 영역에 저장됩니다.
" ": 빈 문자열 리터럴 방식은 String을 기본형으로 사용하고  string pool에 저장됩니다. 


프로세스의 정의: 프로세스는 메모리에서 실행 중인 프로그램, 자원(resources)과 쓰레드로 구성.

쓰레드의 정의: 스레드는 프로세스 내에서 실제로 작업을 수행하는 주체를 의미합니다.

멀티 쓰레드의 단점: 하나의 자원이 같이 쓰면 충돌로 인한 dead lock이 발생할 수 있음.

데드락의 정의: 두 개 이상의 스레드나 프로세스가 서로 상대방의 작업이 끝나기를 기다리며 무한히 대기하는 상황을 말합니다. 
해결방법: 우선순위를 선정해 자원을 선점하도록 하는 것과 공유 불가능한 상호 배제 조건을 제거하는 것이 있다.(syncronized)


동기화: 동기화는 task를 차례 차례 실행하는 것. 여러 작업들을 순차적으로 실행하도록 개발하는 것이다.
비동기: 비동기는 순서대로 task를 실행하지 않고 동시에 여러 task를 실행하 는 것.

java에서 멀티 쓰레드 구현: Thread를 상속 받고 run메서드를 오버라이딩하고 클래스를 만듬. 이객체를 생성하여 객체.start()로 사용. 다중 상속 필요할 때 인터페이스 Runnable를 사용.


싱글톤 패턴의 정의: 메모리 낭비 방지하기 위해 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴입니다.


생성자의 정의: 생성자는 클래스와 같은 이름의 메소드로, 객체가 생성될 때 호출되고 주로 변수 할당의 용도로 사용합니다.


어노테이션: 자바에서 사용될 때의 어노테이션은 코드 사이에 주석처럼 쓰여서 특별한 의미, 기능을 수행하도록 하는 기술이다. 


접근제어자
1.public: 같은 프로젝트 내 어디서든 사용 가능
2.protected: 해당 패키지 내, 다른 패키지에서 상속받아 자손 클래스에서 접근 가능하다.
2.default: 동일한 패키지에서 만 접근이 가능하다.
4.private: 해당 클래스에서만 접근 가능.


String, StringBuffer, StringBuilder의 차이
String은 불변의 속성을 가지며, StringBuffer와 StringBuilder는 가변의 속성을 가집니다.
StringBuffer는 동기화를 지원하여 멀티 쓰레드 환경에서 주로 사용하며,
StringBuilder는 동기화를 지원하지 않아 싱글 쓰레드 환경에서 주로 사용합니다.


static
static 키워드를 사용한 변수나 메소드는 클래스가 메모리에 올라갈 때 자동으로 생성되며 클래스 로딩이 끝나면 바로 사용할 수 있습니다. 즉, 인스턴스(객체) 생성 없이 바로 사용 가능합니다.
모든 객체가 메모리를 공유한다는 특징이 있고, GC 관리 영역 밖에 있기 때문에 프로그램이 종료될 때까지 메모리에 값이 유지된 채로 존재하게 됩니다.


Error와 Exception의 차이
Error는 실행 중 일어날 수 있는 치명적 오류를 말합니다. 컴파일 시점에 체크할 수 없고, 오류가 발생하면 프로그램은 비정상 종료되며 예측 불가능한 UncheckedException에 속합니다.
반면, Exception은 Error보다 비교적 경미한 오류이며, try-catch를 이용해 프로그램의 비정상 종료를 막을 수 있습니다.


final/finally
final는 변수나 메서드, 클래스가 변경 불가능하도록 만드는 예약어 입니다.
finally는 try/catch 블록이 종료될 때 항상 실행될 코드 블록을 정의하기 위해 사용됩니다.
예외가 발생하더라도 항상 실행됩니다.


서블릿: 서블릿은 웹 애플리케이션 서버에서 실행되며, 클라이언트의 HTTP 요청을 처리하고 그에 따른 응답을 생성하는 역할을 합니다. 


API: API는 소프트웨어 간 상호 작용을 위한 규약 또는 인터페이스로, 데이터 교환, 서비스 호출, 함수 호출 등을 가능하게 하는 도구입니다.

DB

DB Connection Pool이란?
웹 컨테이너가 실행되면서 DB와 미리 연결을 해놓은 객체들을 pool에 저장해두었다가 클라이언트 요청이 오면 connection을  빌려주고, 처리가 끝나면 다시 connection을 반납받아 pool에 저장하는 방식을 말함.

데이터베이스의 특징
1.실시간 접근성 : 비정형적인 질의(조회)에 대하여 실시간 처리에 의한 응답이 가능해야 하며,
2.지속적인 변화 : 데이터베이스의 상태는 동적입니다. 즉 새로운 데이터의 삽입(Insert), 삭제(Delete), 갱신(Update)으로 항상 최신의 데이터를 유지해야 합니다.
3.동시 공용 : 데이터베이스는 서로 다른 목적을 가진 여러 응용자들을 위한 것이므로 다수의 사용자가 동시에 같은 내용의 데이터를 이용할 수 있어야 합니다.
4.내용에 의한 참조 : 데이터베이스에 있는 데이터를 참조할 때 데이터 레코드의 주소나 위치에 의해서가 아니라 사용자가 요구하는 데이터 내용으로 찾습니다.

DDL(정의어) : 데이터베이스 구조를 정의, 수정, 삭제하는 언어 ( alter, create, drop )
DML(조작어)  : 데이터베이스내의 자료 검색, 삽입, 갱신, 삭제를 위한 언어 ( select, insert, update, delete )
DCL(제어어) : 데이터에 대해 무결성 유지, 병행 수행 제어, 보호와 관리를 위한 언어 ( commit, rollback, grant, revoke )


GROUP BY: GROUP BY 명령어를 통해 특정 컬럼을 기준으로 연산한 결과를 집계 키로 정의하여 그룹을 짓는 역할을 합니다.


DELETE, TRUNCATE, DROP의 차이
DELETE: 데이터는 지우지만 테이블 용량은 줄어들지 않고 원하는 데이터만 골라서 지울 수 있습니다. 삭제 후 되돌릴 수 있습니다.
TRUNCATE: 전체 데이터를 한번에 삭제하는 방식입니다. 테이블 용량이 줄어들고 인덱스 등도 삭제되지만 테이블은 삭제할 수 없고, 삭제 후 되돌릴 수 없습니다.
DROP: 테이블 자체를 완전히 삭제하는 방식(공간, 인덱스, 객체 모두 삭제)입니다. 삭제 후 되돌릴 수 없습니다.


HAVING과 WHERE의 차이
WHERE는 컬럼에 대한 조건을 지정하는 데 사용되며, HAVING은 그룹화된 결과에 대한 조건을 지정하는 데 사용됩니다. 


varchar와 char의 차이
varchar : 데이터 길이에 따라 저장 용량이 가변적
char :  저장하는 데이터의 크기와 관계없이 용량이 고정적


inner join: INNER JOIN은 조인의 양쪽 테이블 모두 데이터가 존재하는 경우에만 반환된다.
outer join: OUTER JOIN은 조인의 한쪽 테이블만 데이터가 존재해도 반환된다.


DBMS의 정의: 데이터베이스 관리 시스템을 나타냅니다. 사용자가 데이터에 관한 효과적으로 구성, 복원 및 검색할 수 있도록 하는 응용 프로그램 모읍입니다.(oracle, mysql)


정규화의 정의: 무결성을 유지하기 위해서 중복을 최소화.


View: 뷰(View)는 하나 이상의 테이블에서 추출한 데이터를 기반으로 생성된 가상의 테이블입니다. 이는 데이터의 추상화와 보안을 향상시키며, 복잡한 쿼리를 단순화하는 데 사용됩니다. 



Spring

Spring 정의: 자바의 오픈소스 애플리케이션 프레임워크 중 하나입니다. 스프링 컨테이너로 자바 객체를 관리하면서 DI와 IoC를 통해 결합도를 낮추게 됩니다.

DI: DI는 의존성 주입을 의미합니다. 객체간의 의존관계를 미리 설정해두면 스프링 컨테이너가 의존관계를 자동으로 연결해줍니다. 이렇게 되면 직접 의존하는 객체를 생성하는 일이 없기 때문에 결합도가 낮아지는 장점이 있습니다.

IoC: IoC는 제어의 역전을 의미합니다. 제어권이 개발자에게 있지 않고, 프레임워크에 있어서 필요에 따라서 사용자의 코드를 호출하게 됩니다.

AOP: AOP는 트랜잭션이나 로깅, 보안과 같이 공통적으로 사용하는 기능들을 분리하여 관리할 수 있는 것을 말합니다.

PSA: PSA란 환경의 변화와 관계없이 일관된 방식의 기술로의 접근 환경을 제공하는 추상화 구조를 말한다.



Spring Container: 애플리케이션이 실행되면 비어있는 스프링 컨테이너가 생성되고 스프링 설정 파일이나 어노테이션 기반으로 컨테이너에 스프링 빈이 등록되고 의존관계가 주입됩니다.

Bean: 스프링 컨테이너가 생성한 객체들을 '빈'이라고 한다.

Spring MVC: MVC는 Model, View, Controller의 약자이며, 각 계층간의 기능을 구분하는데 중점을 둔 디자인 패턴 입니다.
MVC패턴을 사용하는 이유는 비즈니스 로직과 UI 로직을 분리하여 유지보수를 독립적으로 수행하기 위함 입니다.


시큐리티의 정의: 스프링 시큐리티는 스프링 프레임워크 기반의 자바 애플리케이션에서 보안 및 인증을 구현하기 위한 프레임워크입니다.(암호화 사용한 적 있음)


Spring Boot와 Spring Framework의 차이점
Spring은 프로젝트 초기에 다양한 환경설정을 해야 하지만, Spring Boot는 설정의 많은 부분을 자동화하여 사용자가 편하게 스프링을 활용할 수 있도록 돕습니다.  



Web

AWS: 는 아마존(Amazon)에서 제공하는 클라우드 서비스로, 네트워킹을 기반으로 가상 컴퓨터와 스토리지, 네트워크 인프라 등 다양한 서비스를 제공하고 있다.

웹 서버: 웹 서버란 HTTP 프로토콜을 기반으로 클라이언트가 웹 브라우저에서 어떠한 요청을 하면 그 요청을 받아 정적 컨텐츠를 제공하는 서버이다.

웹 애플리케이션 서버: WAS란 DB 조회 혹은 다양한 로직 처리를 요구하는 동적 컨텐츠를 제공하기 위해 만들어진 Application 서버이다.

Ajax: 자바스크립트를 통해서 비동기식으로 서버에 데이터를 요청하여 필요한 데이터를 받아와 전체 페이지를 새로 고치지 않고 변경이 필요한 페이지 부분만을 고치는 기법


jsp구성요소
1.지시어: <%@ %> 
  1)page: JSP 페이지에 대한 정보를 지정
  2)table: JSP 페이지에서 사용 할 태그 라이브러리 지정
  3)include: JSP 페이지의 특정 영역에 다른 문서를 포함

2.주석문: <!-- -->
   
3.선언문: <%! %> java메서드를 만든다

4.연산문: <%= %> 값을 출력

5.수행문: <% %> java  코드를 실행한다

EL: ${ } jsp화면에서 java코드를 없에기 위해


request와 response 객체에 정의
request : 클라이언트에서 넘어 오는 데이터를 전달 받기 위한 객체
response : 서버에서 클라이언트로 데이터를 전달하기 위한 객체


클라이언트에서 데이터를 넘기는 방법
get 방식: head url에 표시 길이 256byte, 데이터 유출 가능
post : 길에 제한 없고 보안성 보장


<jsp:setProperty/><jsp:getProperty/>그리고<jsp:useBean/>을 언제 사용하는 것입니까? 
<jsp:useBean/>:  java코드 필요 없이 객체를 생성하고
<jsp:setProperty/>:  생성된 객체의 멤버변수에 데이터를 저장
<jsp:getProperty/>: 저장된 데이터를 사용하기 위하여 가져오는 경우 사용


 쿠키(Cookie)와 세션(Session)을 정의
* 쿠키(cookie)
- 클라이언트(브라우저)에 데이터를 저장, 속도 빠르지만 보안성 낮음
* 세션(Session)
- SID(session ID)를 식별자로 서버에 데이터를 저장, 보안성 높지만 속도 느림


localStorage:  localStorage는 시간제한이 없고 브라우저가 꺼져도 죽지 않는다.
sessionStorage: sessionStorage는 세션의 종료시 죽음을 맞이한다. 


XML의 정의: XML은 데이터를 저장하고 전송하기 위한 마크업 언어입니다. XML은 사용자가 자신만의 태그를 정의하고 데이터를 구조화할 수 있는 텍스트 기반의 언어입니다.




회사

솔루션 회사
1) 고유의 기술
2) 업무에 기술과 시스템

MRP: MRP는 제조업 및 생산 환경에서 원자재, 부품 및 구성품의 생산 및 재고 관리를 위한 방법 및 프로세스를 가리키며, 생산에 필요한 자원을 효율적으로 계획하고 관리하는데 도움을 줍니다.

ERP: ERP는기업 자원 관리를 위한 소프트웨어 시스템을 가리킵니다. 이러한 소프트웨어 시스템은 조직 내의 다양한 업무 프로세스 및 자원을 관리하고 통합하는 데 사용됩니다.



